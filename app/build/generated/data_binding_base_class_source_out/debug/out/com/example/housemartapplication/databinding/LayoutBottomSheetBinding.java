// Generated by view binder compiler. Do not edit!
package com.example.housemartapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.housemartapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomSheetBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button signUpUserBtn;

  @NonNull
  public final Button signUpVendorBtn;

  @NonNull
  public final TextView textField1;

  @NonNull
  public final TextView textField2;

  @NonNull
  public final TextView textField3;

  private LayoutBottomSheetBinding(@NonNull LinearLayout rootView, @NonNull Button signUpUserBtn,
      @NonNull Button signUpVendorBtn, @NonNull TextView textField1, @NonNull TextView textField2,
      @NonNull TextView textField3) {
    this.rootView = rootView;
    this.signUpUserBtn = signUpUserBtn;
    this.signUpVendorBtn = signUpVendorBtn;
    this.textField1 = textField1;
    this.textField2 = textField2;
    this.textField3 = textField3;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.signUpUserBtn;
      Button signUpUserBtn = ViewBindings.findChildViewById(rootView, id);
      if (signUpUserBtn == null) {
        break missingId;
      }

      id = R.id.signUpVendorBtn;
      Button signUpVendorBtn = ViewBindings.findChildViewById(rootView, id);
      if (signUpVendorBtn == null) {
        break missingId;
      }

      id = R.id.textField1;
      TextView textField1 = ViewBindings.findChildViewById(rootView, id);
      if (textField1 == null) {
        break missingId;
      }

      id = R.id.textField2;
      TextView textField2 = ViewBindings.findChildViewById(rootView, id);
      if (textField2 == null) {
        break missingId;
      }

      id = R.id.textField3;
      TextView textField3 = ViewBindings.findChildViewById(rootView, id);
      if (textField3 == null) {
        break missingId;
      }

      return new LayoutBottomSheetBinding((LinearLayout) rootView, signUpUserBtn, signUpVendorBtn,
          textField1, textField2, textField3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

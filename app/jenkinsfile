pipeline {
    agent any
    
    environment {
        GRADLE_HOME = '/opt/gradle-8.6'
        PATH = "${GRADLE_HOME}/bin:${PATH}"
        AWS_DEFAULT_REGION = 'ap-south-1'
        ECR_REGISTRY = '730335604401.dkr.ecr.ap-south-1.amazonaws.com'
        ECR_REPO = 'heydevopsjavaapp'
        K8S_NAMESPACE = 'java-app'
        SONAR_URL = 'http://43.205.138.85:9000'
        NEXUS_URL = 'http://43.205.138.85:8081'
        ANDROID_HOME = '/home/ubuntu/Android/Sdk' // Define your Android SDK path here
    }
    
    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/heydevopsdev/DevOps_Repo.git',
                        credentialsId: 'git-token'  // Replace with your Git credentials ID
                    ]]
                ])
            }
        }

        stage('Scan File System Using Trivy') {
            steps {
                script {
                    sh 'trivy filesystem . --format json > trivy_scan_fs.json'
                }
            }
        }

        stage('Compile Java App Using Gradle') {
            steps {
                script {
                    echo 'Building Java application'
                    sh "gradle --version"
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    echo 'Running SonarQube analysis'
                    withSonarQubeEnv('sonarqube') {
                        sh "gradle sonarqube -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${env.SONAR_TOKEN}"
                    }
                }
            }
        }

        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    echo 'Publishing artifacts to Nexus'
                    def gradleProps = readProperties file: 'gradle.properties'
                    def filesByGlob = findFiles(glob: "app/build/libs/*.jar")
                    def artifactPath = filesByGlob.isEmpty() ? null : filesByGlob[0].path

                    if (gradleProps && artifactPath) {
                        nexusArtifactUploader(
                            nexusVersion: 'nexus3',
                            protocol: 'http',
                            nexusUrl: "${NEXUS_URL}",
                            groupId: "${gradleProps['group']}",
                            version: "${gradleProps['version']}",
                            repository: 'hey-devops-java-app',
                            credentialsId: 'nexus',
                            artifacts: [
                                [artifactId: "${gradleProps['archivesBaseName']}", classifier: '', file: artifactPath, type: "jar"],
                                [artifactId: "${gradleProps['archivesBaseName']}", classifier: '', file: "app/build/libs/${gradleProps['archivesBaseName']}-${gradleProps['version']}.pom", type: "pom"]
                            ]
                        )
                    } else {
                        error "Failed to read gradle.properties file or find artifact"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image'
                    dir('app') {
                        sh 'sudo docker build -t java-app-devops .'
                    }
                }
            }
        }

        stage('Scan Docker Image Using Trivy') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo 'Scanning Docker image using Trivy'
                    sh 'trivy image --format json --output trivy_scan_image.json java-app-devops'
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    echo 'Pushing Docker image to ECR'
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        sh "docker tag java-app-devops ${ECR_REGISTRY}/${ECR_REPO}:latest"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPO}:latest"
                    }
                }
            }
        }

        stage('Create Namespace') {
            steps {
                script {
                    echo 'Creating Kubernetes namespace'
                    sh "kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying application to Kubernetes'
                    dir('app') {
                        sh "ls -l"
                        sh "kubectl apply -f deployandservice.yaml -n ${K8S_NAMESPACE}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Archiving artifacts'
            archiveArtifacts artifacts: 'trivy_scan_fs.json, trivy_scan_image.json', allowEmptyArchive: true
        }
    }
}
